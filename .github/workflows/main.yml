name: CI

# Controls when the workflow will run
on:
  push:
    branches: ['main']
  pull_request:
    types: [opened, synchronize]

# Prevent duplicate workflows from running
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Test each aspect of the application
jobs:
  # Static tests don't involve any logic or context.
  # They are just a set of tests that can detect if we are not introducing any faulty code.
  static-test:
    name: 🔬 Static tests
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          fetch-depth: 2

      - name: 🟨 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: ⬣ ESLint
        run: pnpm lint

      # FIX: For some unknown reasons this stopped working on CI
      # - name: ʦ TypeScript
      #   run: pnpm typecheck

  # Unit tests are tests that are not dependent on any external service.
  # Usually, they are tests that are testing the logic of a specific function or component.
  unit-test:
    needs: [static-test]
    name: 🚦 Unit tests
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          fetch-depth: 2

      - name: 🏄 Copy test env vars
        run: cp .env.example .env

      - name: 🟨 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🚦 Run unit tests
        run: pnpm test:unit

  # Integration tests are tests that are dependent on external services.
  integration-test:
    needs: [static-test]
    name: 🚥 Integration tests
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          fetch-depth: 2

      - name: 🏄 Copy test env vars
        run: cp .env.example .env

      - name: 🟨 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install

      - name: 🐳 Docker compose
        run:
          docker-compose up -d && sleep 3 && pnpm prisma migrate reset --force
          --skip-seed

      - name: 🚦 Run integration tests
        run: pnpm test:integration

  # E2E tests are executed as if the actual user did the interaction.
  # They are usually used to test critical parts of the business.
  e2e-test:
    needs: [static-test]
    name: 🤹‍♀️ E2E tests
    timeout-minutes: 60
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          fetch-depth: 2

      - name: 🏄 Copy test env vars
        run: cp .env.example .env

      - name: 🟨 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Install Playwright Browsers
        run: pnpm run --parallel test:e2e:install

      - name: 🐳 Docker compose
        run:
          docker-compose up -d && sleep 3 && pnpm prisma migrate reset --force
          --skip-seed

      - name: 🤹‍♀️ Run Playwright tests
        run: pnpm test:e2e
        env:
          RUNNING_E2E: 'true'

      - name: 📤 Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: packages/web-test/playwright-report/
          retention-days: 30
